openapi: 3.0.0
info:
  title: Data Format Requirements Specification
  version: v3.0.0
  description: "Requirements are captured using Open API Specification (OAS) as a means to streamline capturing:\n-\tStandard data element names following standard naming conventions\n-\tData relationships (e.g. associative, hierarchical)\n-\tMultiplicity/cardinality\n-\tValid values including enumerations\n-\tRequired vs. optional\n\nThis is a logical requirements specification and does not consider a specific technology or implementation.  The primary consumer of these requirements is the BSC Implementation TC (ITC).\n\nIt is anticipated the ITC can and will choose a different data organization that is optimal for storage and retrieval given implementation specifics and interoperability considerations.  The use of OAS and associated JSON-based examples by DFTC in this specification is solely a means to capture requirements for human consumption.  It does not specify or imply a physical API or JSON-oriented storage structure."
  contact:
    name: Ben Kothari
    url: 'http://www.acuwize.com'
servers:
  - url: /
    description: ''
paths:
  /location: {}
components:
  schemas:
    Location:
      allOf:
        - $ref: 'https://redblue36.github.io/DataFormatDemoSwaggerUI/common.yml#/components/schemas/Meta'
        - $ref: '#/components/schemas/Position'
        - type: object
          properties:
            positions:
              type: array
              description: |-
                Array of Positions within a Location site.

                If a location position has more than 1
                position, then a sub-class of positions is provided. This array contains 1 or more Position-implementing structures that each describe the location. When the array contains more than 1 structure, each structure is meant to represent the same location but using a different method (i.e. latitude/longitude vs postal address etc).

                Within the Position a precedence number which is optional (starting at 1 and incrementing from there) identifies the order in which structures are preferred. In other words, the structure with a Precedence value of 1 is the ‘native’ or preferred structure to use for determining the location. It is expected that data consumers within the industry will use the structure with Precedence 1 and ignore the others. Data consumers unable to interpret the structure (method) with Precedence 1 would move on to the structure with Precedence 2 but if that one also uses a method unfamiliar to them, then to 3, etc.

                Position structure can contain nested structures including optional (nullable) nested structures to handle scenarios where a method for specifying a location may have instances where a detailed location is needed and others where a detailed location description is not needed (or possible). For example, a location at a Warehouse would have as the root position structure (the root implements Position), the postal address of the warehouse. Within that structure could be nested a warehouse zone identifying an area that the warehouse is sub-divided into. And within the Warehouse Zone structure could be nested a bin or shelf that might identify the specific location needed for a warehouse picker to locate an item
              items:
                $ref: '#/components/schemas/Position'
      description: |-
        The overall logical data requirements and release management for the Location Component, as defined by BSC Data Format Technical Committee, is described in detail at this master location [linked here](https://redblue36.github.io/DataFormatDemoSwaggerUI/location_doc.html).

        This specification has been used to generate a visual representation to easily digest the data structure.  This UML diagram is [linked here](https://raw.githubusercontent.com/redblue36/DataFormatDemoSwaggerUI/master/diagrams/location.png).
      x-tags:
        - Location
      x-examples:
        'Location is only a simple address and no relevant position information is required ':
          ID: '1234'
          name: SERVPROV-5_413-426
          qualifier: Address
          address1: 2 ALPINE DR
          address2: ''
          city: CLOSTER
          stateProvince: NJ
          zipPostal: '07624'
          country: USA
        Location and its relevant position is displayed based on precedence:
          ID: '1234'
          name: SERVPROV-5_413-426
          qualifier: Mulitple
          positions:
            - position: 1
              qualifier: Address
              Address1: 10 Alpine Dr
              Address2: ''
              City: Closter
              stateProvince: NJ
              zipPostal: '07627'
              country: USA
            - position: 2
              qualifier: GeoCoord
              lattitude: 40.03657
              longitude: -75.38013
              accuracyMeters: 10
              altitudeMeters: 5
            - position: 3
              qualifier: SPLC
              SPLC: NYK
              stationName: Newark
            - position: 4
              qualifier: City
              City: Closter
              stateProvince: NJ
              country: USA
      title: Location Component
    Position:
      title: Position
      type: object
      description: "Position is dependent object and may be used to document locations when they are presented in a hierarchy.  \nThis structure may not be referenced outside of the boundry of the Location Component structure."
      x-tags:
        - Location/Position
      properties:
        name:
          type: string
          description: |
            Name of the location site.
        qualifier:
          type: string
          description: Identfies the type of Location.
          enum:
            - Address
            - GeoCoord
            - SPLC
            - City
            - Link
            - Multiple
          minLength: 1
        latitude:
          type: number
          description: Value representing latitude in degrees and minutes.
          example: 40.03657
        longitude:
          type: number
          description: Value representing longitude in degrees and minutes
          example: -75.38013
        accuracyMeters:
          type: number
          description: Accuracy of latitude/longitude within meters.
          example: 10
        altitudeMeters:
          type: number
          description: Accuracy of height within meters.
          example: 5
        SPLC:
          type: string
          description: |-
            Standard Point Location Code standard value per [https://www.railinc.com/rportal/standard-point-location-code](https://www.railinc.com/rportal/standard-point-location-code)

            The rail industry has an industry-specific method of specifying locations called the SPLC. Third parties may not have the ability to interpret this data so railway operators publishing locations in SPLC formats have the ability to publish a second more widely-known method such as latitude/longitude.
          example: NYK
        addressLine1:
          type: string
          description: 'Street, Apt, Suite information'
        addressLine2:
          type: string
          description: 'Street, Apt #, Suite #, information'
        city:
          type: string
          description: City name
        stateProvince:
          type: string
          description: State or Province name
        zipPostal:
          type: string
          description: Zip code
        country:
          type: string
          description: |-
            Name of country

            //TODO:  Why is there a "country" and a "countryCode".  The examples in the published doc only include country and show a code value not a name.
        countryCode:
          type: string
          description: |-
            Country code of country conforming to standard ISO-3166 [https://www.iso.org/iso-3166-country-codes.html](https://www.iso.org/iso-3166-country-codes.html)

            //TODO are these 2 or 3 character codes?
        buildingName:
          type: string
          description: Building name
        buildingFloor:
          type: string
          description: Building floor
          example: '2'
        isle:
          type: string
          example: '1'
        bin:
          type: string
          example: '5'
        parkingName:
          type: string
          description: 'Yard/Parking/Any kind of open structure: Lot Name, Floor, Isle, LotId'
        level:
          type: string
          description: //TODO Need a description--not in the published spec.
          example: L5
        lotId:
          type: string
          description: //TODO lotid is not in the published spect.  Lot is referenced in ParkingName.
          example: '15'
